name: build analyze, scan todo application
on:
  push:
    branches:
      - main
jobs:

  build_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
# Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Run SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master

      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHB_TOKEN: ${{ secrets.GIT_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Shrikumar-Udupa_todo-frontend
          -Dsonar.organization=cloudkubesec
          -Dsonar.projectName=todo-frontend 

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache-dependency-path: frontend/package-lock.json
    - run: npm install --prefix frontend/

    - name: OWASP Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.'
        format: 'HTML'
        out: 'reports' # this is the default, no need to specify unless you wish to override it
        args: >
          --enableRetired
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

    - name: Run Trivy vulnerability scanner in repo mode (FS Scan)
      uses: aquasecurity/trivy-action@0.20.0
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Clean install dependencies and build
      run: pwd && ls -lrth
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build docker image using dockerfile and push to dockerhub
      uses: docker/build-push-action@v5
      with:
        context: .
        file: frontend/Dockerfile
        push: true
        tags: |
            shrikumarudupa/todo-frontend:${{ github.run_number }}
            shrikumarudupa/todo-frontend:latest

    - name: Scan Docker Image with Trivy
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: shrikumarudupa/todo-frontend:latest
        severity: HIGH,CRITICAL
        format: table # You can use other formats like 'json' or 'sarif'
        ignore-unfixed: true # Optional: ignores vulnerabilities without a fix        

  docker_image:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
# Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cloudkuesec
        IMAGE_TAG: todo-frontend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


